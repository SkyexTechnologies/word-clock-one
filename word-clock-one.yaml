substitutions:
  name: "word-clock-one"
  friendly_name: "Word Clock One"
  project_name: "Skyex Technologies.Word Clock"
  project_version: "1.0.0"

esphome:
  name: "${name}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"
  on_boot:
    then:
      - light.turn_on: 
          id: word_clock

esp8266:
  board: esp01_1m
  restore_from_flash : true 

logger:

api:

ota:

wifi:
  fast_connect: False
  ap: {}

captive_portal:

improv_serial:

web_server:
  port: 80
  local: True
  
dashboard_import:
  package_import_url: github://SkyexTechnologies/word-clock-one/word-clock-one.yaml@main
  import_full_config: False

time:
  - platform: sntp
    id: sntp_time

button:
  - platform: factory_reset
    id: factory_reset_button
    name: Factory Reset Word Clock
  - platform: restart
    id: restart_button
    name: Restart Word Clock

binary_sensor:
  - platform: gpio
    id: reset_button
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    internal: true
    on_click:
      - min_length: 2s
        max_length: 5s
        then:
          - button.press: restart_button
      - min_length: 10s
        max_length: 20s
        then:
          - button.press: factory_reset_button

select:
  - platform: template
    name: "03. Brightness"
    id: automatic_brightness
    restore_value: True
    optimistic: True
    icon: "mdi:brightness-auto"
    options:
      - Automatic
      - Manual
  - platform: template
    name: "08 Indication: It is"
    id: indication_it_is
    restore_value: True
    optimistic: True
    icon: "mdi:file-word-box-outline"
    options:
      - "On"
      - "Off"
  - platform: template
    name: "09 Indication: Minutes"
    id: indication_minutes
    restore_value: True
    optimistic: True
    icon: "mdi:file-word-box-outline"
    options:
      - "On"
      - "Off"
  - platform: template
    name: "10 Indication: Week Days"
    id: indication_week_days
    restore_value: True
    optimistic: True
    icon: "mdi:file-word-box-outline"
    options:
      - "On"
      - "Off"

script:
  - id: set_light_brightness
    parameters:
      quick_transition: bool
    then:
      - if: 
          condition:
            and: 
              - lambda: return id(automatic_brightness).index_of("Automatic") == id(automatic_brightness).active_index();
              - light.is_on: word_clock
          then:
            - light.control:
                id: word_clock
                transition_length: !lambda |-
                  if (quick_transition) 
                    return 500;
                  return 10000;
                brightness: !lambda |-
                  float min_brightness = id(minimum_brightness).state;
                  float max_brightness = id(maximum_brightness).state;
                  float sensor_reading = id(light_sensor).state;
                  float brightness = (max_brightness - min_brightness) * sensor_reading + min_brightness;
                  if (brightness > 1.0) {
                    brightness = 1.0;
                  }
                  if (brightness < 0.0) {
                    brightness = 0.0;
                  }
                  return brightness;

number:
  - platform: template
    name: "11. Red"
    id: red
    optimistic: True
    min_value: 0
    max_value: 1
    step: 0.01
    restore_value: True
    disabled_by_default: True
    icon: "mdi:palette"
    on_value:
      then:
        - if:
            condition:
              - lambda: "return id(word_clock).remote_values.get_red() != x;"
            then:
              - light.control:
                  id: word_clock
                  red: !lambda "return x;"
                  green: !lambda "return id(green).state;"
                  blue: !lambda "return id(blue).state;"
  - platform: template
    name: "12. Green"
    id: green
    optimistic: True
    min_value: 0
    max_value: 1
    step: 0.01
    restore_value: True
    disabled_by_default: True
    icon: "mdi:palette"
    on_value:
      then:
        - if:
            condition:
              - lambda: "return id(word_clock).remote_values.get_green() != x;"
            then:
              - light.control:
                  id: word_clock
                  red: !lambda "return id(red).state;"
                  green: !lambda "return x;"
                  blue: !lambda "return id(blue).state;"
  - platform: template
    name: "13. Blue"
    id: blue
    optimistic: True
    min_value: 0
    max_value: 1
    step: 0.01
    restore_value: True
    disabled_by_default: True
    icon: "mdi:palette"
    on_value:
      then:
        - if:
            condition:
              - lambda: "return id(word_clock).remote_values.get_blue() != x;"
            then:
              - light.control:
                  id: word_clock
                  red: !lambda "return id(red).state;"
                  green: !lambda "return id(green).state;"
                  blue: !lambda "return x;"
  - platform: template
    name: "02. Transition"
    id: transition
    optimistic: True
    min_value: 0
    max_value: 10
    step: 1
    restore_value: True
    icon: "mdi:transition"
  - platform: template
    name: "06. Hour Offset"
    id: hour_offset
    optimistic: True
    min_value: 0
    max_value: 23
    step: 1
    restore_value: True
    icon: "mdi:clock-plus-outline"
  - platform: template
    name: "07. Minutes Offset"
    id: minutes_offset
    optimistic: True
    min_value: 0
    max_value: 59
    step: 1
    restore_value: True
    icon: "mdi:clock-plus-outline"
  - platform: template
    name: "04. Minimum Brightness"
    id: minimum_brightness
    optimistic: True
    min_value: 0.01
    max_value: 1
    step: 0.01
    restore_value: True
    icon: "mdi:brightness-4"
    on_value:
      - if: 
          condition:
            - lambda: "return id(maximum_brightness).state < x;"
          then:
            - number.set:
               id: maximum_brightness
               value: !lambda "return x;"
      - script.execute: 
          id: set_light_brightness
          quick_transition: True
  - platform: template
    name: "05. Maximum Brightness"
    id: maximum_brightness
    optimistic: True
    min_value: 0.01
    max_value: 1
    initial_value: 1
    step: 0.01
    restore_value: True  
    icon: "mdi:brightness-5"
    on_value:
      - if: 
          condition:
            - lambda: "return x < id(minimum_brightness).state;"
          then:
            - number.set:
               id: minimum_brightness
               value: !lambda "return x;"
      - script.execute: 
          id: set_light_brightness
          quick_transition: True
  - platform: template
    name: "Brightness"
    id: brightness
    optimistic: True
    min_value: 0.01
    max_value: 1
    initial_value: 1
    step: 0.01
    restore_value: True
    internal: True

sensor:
  - platform: adc
    pin: A0
    name: "Light Sensor"
    id: light_sensor
    update_interval: 15s
    internal: True
    on_value:
      - script.execute: 
          id: set_light_brightness
          quick_transition: False

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812X
    pin: GPIO2
    num_leds: 121
    name: "01. Word Clock"
    id: word_clock
    default_transition_length: 10s
    icon: "mdi:file-word-box-outline"
    on_state:
      then:
        - if:
            condition:
              and:
                - lambda: "return id(word_clock).get_effect_name() == \"None\";"
                - light.is_on: word_clock
            then:
              - delay: 10ms
              # Enforce the light effect to be at "Clock"
              - light.control:
                  id: word_clock
                  effect: Clock
        - if:
            condition:
              and:
                - lambda: "return id(word_clock).remote_values.get_red() != id(red).state;"
                - light.is_on: word_clock
            then:
              - number.set:
                  id: red
                  value: !lambda "return id(word_clock).remote_values.get_red();"
        - if:
            condition:
              and:
                - lambda: "return id(word_clock).remote_values.get_green() != id(green).state;"
                - light.is_on: word_clock
            then:
              - number.set:
                  id: green
                  value: !lambda "return id(word_clock).remote_values.get_green();"
        - if:
            condition:
              and:
                - lambda: "return id(word_clock).remote_values.get_blue() != id(blue).state;"
                - light.is_on: word_clock
            then:
              - number.set:
                  id: blue
                  value: !lambda "return id(word_clock).remote_values.get_blue();"
        - if: 
            condition:
              and: 
                - lambda: return id(automatic_brightness).index_of("Manual") == id(automatic_brightness).active_index();
                - lambda: "return id(word_clock).remote_values.get_brightness() != id(brightness).state;"
                - light.is_on: word_clock
            then:
              - number.set:
                  id: brightness
                  value: !lambda "return id(word_clock).remote_values.get_brightness();"

    on_turn_on:
      then:
        - if:
            condition:
              - lambda: return id(automatic_brightness).index_of("Manual") == id(automatic_brightness).active_index();
            then:
              - light.control: 
                  id: word_clock
                  effect: Clock
                  red: !lambda "return id(red).state;"
                  green: !lambda "return id(green).state;"
                  blue: !lambda "return id(blue).state;"
                  brightness: !lambda "return id(brightness).state;"
            else:
              - light.control: 
                  id: word_clock
                  effect: Clock
                  red: !lambda "return id(red).state;"
                  green: !lambda "return id(green).state;"
                  blue: !lambda "return id(blue).state;"
    effects:
      - addressable_lambda:
          name: "Clock"
          update_interval: 20ms
          lambda: |-
            static int minutes;
            static int hours;
            static int CurrentTime[5];
            static int PreviousTime[5];
            static int fade;
            static int fadeTransition;
            
            static Color letters[121];
            const int words[37][12] {
              {  0,  1,  2,  4,  5, -1, -1, -1, -1, -1, -1, -1}, // [0] - HET IS
              { 99,100,101, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [1] - UUR
              {  7,  8,  9, 10, 22, 23, 24, 25, -1, -1, -1, -1}, // [2] - VIJF OVER
              { 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1}, // [3] - TIEN OVER
              { 28, 29, 30, 31, 32, 33, 34, 35, 36, -1, -1, -1}, // [4] - KWART OVER
              { 18, 19, 20, 21, 11, 12, 13, 14, 40, 41, 42, 43}, // [5] - TIEN VOOR HALF
              {  7,  8,  9, 10, 11, 12, 13, 14, 40, 41, 42, 43}, // [6] - VIJF VOOR HALF
              { 40, 41, 42, 43, -1, -1, -1, -1, -1, -1, -1, -1}, // [7] - HALF
              {  7,  8,  9, 10, 22, 23, 24, 25, 40, 41, 42, 43}, // [8] - VIJF OVER HALF
              { 18, 19, 20, 21, 22, 23, 24, 25, 40, 41, 42, 43}, // [9] - TIEN OVER HALF
              { 28, 29, 30, 31, 32, 44, 45, 46, 47, -1, -1, -1}, // [10] - KWART VOOR
              { 18, 19, 20, 21, 11, 12, 13, 14, -1, -1, -1, -1}, // [11] - TIEN VOOR
              {  7,  8,  9, 10, 11, 12, 13, 14, -1, -1, -1, -1}, // [12] - VIJF VOOR
              {104,105,106,107,108,109, -1, -1, -1, -1, -1, -1}, // [13] - TWAALF
              { 51, 52, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [14] - EEN
              { 62, 63, 64, 65, -1, -1, -1, -1, -1, -1, -1, -1}, // [15] - TWEE
              { 55, 56, 57, 58, -1, -1, -1, -1, -1, -1, -1, -1}, // [16] - DRIE
              { 66, 67, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1}, // [17] - VIER
              { 70, 71, 72, 73, -1, -1, -1, -1, -1, -1, -1, -1}, // [18] - VIJF
              { 74, 75, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [19] - ZES
              { 83, 84, 85, 86, 87, -1, -1, -1, -1, -1, -1, -1}, // [20] - ZEVEN
              { 88, 89, 90, 91, -1, -1, -1, -1, -1, -1, -1, -1}, // [21] - ACHT
              { 77, 78, 79, 80, 81, -1, -1, -1, -1, -1, -1, -1}, // [22] - NEGEN
              { 92, 93, 94, 95, -1, -1, -1, -1, -1, -1, -1, -1}, // [23] - TIEN
              { 96, 97, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [24] - ELF
              {116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [25] - Z
              {110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [26] - M
              {111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [27] - D
              {112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [28] - W
              {113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [29] - D
              {114, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [30] - V
              {115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [31] - Z
              { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [32] - MIN
              {117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [33] - MIN + 1
              {117,118, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [34] - MIN + 2
              {117,118,119, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // [35] - MIN + 3
              {117,118,119,120, -1, -1, -1, -1, -1, -1, -1, -1}  // [36] - MIN + 4
            };

            if (initial_run) {
              it.all() = Color::BLACK;
              std::fill_n(letters, it.size(), Color::BLACK);
              fade = int(25*id(transition).state);
              fadeTransition = int(25*id(transition).state);
            }
            
            auto time = id(sntp_time).now();
            if (!time.is_valid()) {
              return;
            }

            /*
             * Below is the transition control of the clock to change to the next time (next 5 minute section).
             * The update_interval is 20ms, which would mean that it takes 50 iterations in total to fade to the next time over a 1 second period.
             * This fade is divided into fading-out the old time (25 steps) and fading-in the new time (25 steps).
             * The transition slider specifies the number of seconds the total fade takes (id: transition).
             * The value of the transition is multiplied by 25 (steps) to create the fader.
             */
            auto trans = int(25*id(transition).state);
            if (trans != fadeTransition) {
              fade = trans;
              fadeTransition = trans;
            }

            int total_minutes = (time.hour * 60 + time.minute + int(id(minutes_offset).state)) % 1440;
            minutes = (int)(total_minutes / 5) * 5 % 60; // minutes per 5
            hours = (total_minutes / 60 + int(id(hour_offset).state)) % 24;

            if (minutes >= 20) hours += 1;

            CurrentTime[0] = 0;
            CurrentTime[1] = minutes / 5 + 1;
            CurrentTime[2] = (hours % 12) + 13;
            CurrentTime[3] = time.day_of_week + 24;
            CurrentTime[4] = (total_minutes % 5) + 32;

            if (PreviousTime[1] == CurrentTime[1]) {
              std::fill_n(letters, it.size(), Color::BLACK);
              for (int i = 0; i < 5; i++) { 
                if (i == 0 && id(indication_it_is).index_of("Off") == id(indication_it_is).active_index()) continue;
                if (i == 3 && id(indication_week_days).index_of("Off") == id(indication_week_days).active_index()) continue;
                if (i == 4 && id(indication_minutes).index_of("Off") == id(indication_minutes).active_index()) continue;
                for (int j = 0; j < 12; j++) {
                  if (words[CurrentTime[i]][j] >= 0) letters[words[CurrentTime[i]][j]] = current_color;
                }
              }
            }

            if (!initial_run) {
              // Fade words from selected brightness down to zero, when time changes.
              if (PreviousTime[1] != CurrentTime[1] && fade > 0) {
                for (int i = 0; i < it.size(); i++) it[i] = Color(int(letters[i].r*fade/fadeTransition), int(letters[i].g*fade/fadeTransition), int(letters[i].b*fade/fadeTransition));
                fade--;
                return;
              }

              // Set previous time to current time, such that above code will not run again. 
              for (int i = 0; i < 5; i++) PreviousTime[i] = CurrentTime[i];
              
              // Now that new pixels for current time are known, slowly fade in the words.
              if (fade < fadeTransition) {
                for (int i = 0; i < it.size(); i++) it[i] = Color(int(letters[i].r*fade/fadeTransition), int(letters[i].g*fade/fadeTransition), int(letters[i].b*fade/fadeTransition));
                fade++;
                return;
              }
            }
              
            for (int i = 0; i < it.size(); i++) it[i] = letters[i];

            // Set previous time to current time, such that above code will not run again. 
            for (int i = 0; i < 5; i++) PreviousTime[i] = CurrentTime[i];